// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AntourageWidget
import AVFoundation
import AVKit
import AVFoundation.AVPlayerItem
@_exported import AntourageWidget
import AuthenticationServices
import CoreData
import CoreGraphics
import Foundation
import MediaPlayer
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import os.log
import os
import zlib
@objc final public class ModernAVPlayer : ObjectiveC.NSObject, AntourageWidget.ModernAVPlayerExposable {
  weak final public var delegate: AntourageWidget.ModernAVPlayerDelegate?
  final public var player: AVFoundation.AVPlayer {
    get
  }
  final public var state: AntourageWidget.ModernAVPlayer.State {
    get
  }
  final public var currentMedia: AntourageWidget.PlayerMedia? {
    get
  }
  final public var currentTime: Swift.Double {
    get
  }
  final public var loopMode: Swift.Bool {
    get
    set
  }
  final public var remoteCommands: [AntourageWidget.ModernAVPlayerRemoteCommand]? {
    get
    set
  }
  public init(player: AVFoundation.AVPlayer = AVPlayer(), config: AntourageWidget.PlayerConfiguration = ModernAVPlayerConfiguration(), plugins: [AntourageWidget.PlayerPlugin] = [], loggerDomains: [AntourageWidget.ModernAVPlayerLoggerDomain] = [])
  final public func pause()
  final public func seek(position: Swift.Double)
  final public func seek(offset: Swift.Double)
  final public func stop()
  final public func load(media: AntourageWidget.PlayerMedia, autostart: Swift.Bool, position: Swift.Double? = nil)
  final public func updateMetadata(_ metadata: AntourageWidget.PlayerMediaMetadata?)
  final public func play()
  @objc deinit
  @objc override dynamic public init()
}
extension ModernAVPlayer {
  public enum State : Swift.String, Swift.CustomStringConvertible {
    case buffering
    case failed
    case initialization
    case loaded
    case loading
    case paused
    case playing
    case stopped
    case waitingForNetwork
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
}
public class HubConnectionBuilder {
  public init(url: Foundation.URL)
  public func withHubProtocol(hubProtocolFactory: @escaping (AntourageWidget.Logger) -> AntourageWidget.HubProtocol) -> AntourageWidget.HubConnectionBuilder
  public func withHttpConnectionOptions(configureHttpOptions: (AntourageWidget.HttpConnectionOptions) -> Swift.Void) -> AntourageWidget.HubConnectionBuilder
  public func withLogging(minLogLevel: AntourageWidget.LogLevel) -> AntourageWidget.HubConnectionBuilder
  public func withLogging(logger: AntourageWidget.Logger) -> AntourageWidget.HubConnectionBuilder
  public func withLogging(minLogLevel: AntourageWidget.LogLevel, logger: AntourageWidget.Logger) -> AntourageWidget.HubConnectionBuilder
  public func withHubConnectionDelegate(delegate: AntourageWidget.HubConnectionDelegate) -> AntourageWidget.HubConnectionBuilder
  public func withAutoReconnect(reconnectPolicy: AntourageWidget.ReconnectPolicy = DefaultReconnectPolicy()) -> AntourageWidget.HubConnectionBuilder
  public func withPermittedTransportTypes(_ permittedTransportTypes: AntourageWidget.TransportType) -> AntourageWidget.HubConnectionBuilder
  @available(*, deprecated)
  public func withLegacyHttpConnection() -> AntourageWidget.HubConnectionBuilder
  public func build() -> AntourageWidget.HubConnection
  @objc deinit
}
extension HubConnectionBuilder {
  public func withJSONHubProtocol() -> AntourageWidget.HubConnectionBuilder
}
public protocol Connection {
  var delegate: AntourageWidget.ConnectionDelegate? { get set }
  var connectionId: Swift.String? { get }
  func start()
  func send(data: Foundation.Data, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  func stop(stopError: Swift.Error?)
}
@objc public class LatestComment : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  public var nickname: Swift.String
  public var text: Swift.String
  public var userID: Swift.String
  public var date: Foundation.Date? {
    get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required convenience public init?(coder: Foundation.NSCoder)
  public init(userID: Swift.String, nickname: Swift.String, text: Swift.String, timestamp: Swift.Int?)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class PollTableViewCell : UIKit.UITableViewCell {
  @objc @IBOutlet public var titleLabel: UIKit.UILabel!
  public var isStatistic: Swift.Bool {
    get
    set
  }
  public var isUserChoise: Swift.Bool {
    get
    set
  }
  public var percentage: Swift.Int {
    get
    set
  }
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension UIViewController : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @available(iOS 13.0, *)
  @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
public protocol ModernAVPlayerDelegate : AnyObject {
  func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didStateChange state: AntourageWidget.ModernAVPlayer.State)
  func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didCurrentMediaChange media: AntourageWidget.PlayerMedia?)
  func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didCurrentTimeChange currentTime: Swift.Double)
  func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didItemDurationChange itemDuration: Swift.Double?)
  func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, unavailableActionReason: AntourageWidget.PlayerUnavailableActionReason)
  func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didItemPlayToEndTime endTime: Swift.Double)
}
extension ModernAVPlayerDelegate {
  public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didStateChange state: AntourageWidget.ModernAVPlayer.State)
  public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didCurrentMediaChange media: AntourageWidget.PlayerMedia?)
  public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didCurrentTimeChange currentTime: Swift.Double)
  public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didItemDurationChange itemDuration: Swift.Double?)
  public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, unavailableActionReason: AntourageWidget.PlayerUnavailableActionReason)
  public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didItemPlayToEndTime endTime: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SeekPaddingView : UIKit.UIView {
  public var soughtTime: Swift.Int {
    get
    set
  }
  public init(showInView view: UIKit.UIView)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func seekBackward()
  @objc deinit
  public func seekForward()
}
@objc @_inheritsConvenienceInitializers final public class WidgetView : UIKit.UIView {
  @objc override final public func layoutSubviews()
  @objc override final public func didMoveToSuperview()
  @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override final public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class ModernAVPlayerMediaItem : AntourageWidget.PlayerMediaItem {
  final public let item: AVFoundation.AVPlayerItem
  final public let url: Foundation.URL
  final public let type: AntourageWidget.MediaType
  final public let assetOptions: [Swift.String : Any]?
  public init?(item: AVFoundation.AVPlayerItem, type: AntourageWidget.MediaType, metadata: AntourageWidget.ModernAVPlayerMediaMetadata? = nil, assetOptions: [Swift.String : Any]? = nil)
  public func getMetadata() -> AntourageWidget.PlayerMediaMetadata?
  public func setMetadata(_ metadata: AntourageWidget.PlayerMediaMetadata?)
  @objc deinit
}
public enum WidgetPosition : Swift.String {
  case topLeft, midLeft, bottomLeft
  case topMid, bottomMid
  case topRight, midRight, bottomRight
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct ModernAVPlayerMediaMetadata : AntourageWidget.PlayerMediaMetadata, Swift.Equatable {
  public let title: Swift.String?
  public let albumTitle: Swift.String?
  public let artist: Swift.String?
  public let image: Foundation.Data?
  public let remoteImageUrl: Foundation.URL?
  public init(title: Swift.String? = nil, albumTitle: Swift.String? = nil, artist: Swift.String? = nil, image: Foundation.Data? = nil, remoteImageUrl: Foundation.URL? = nil)
  public static func == (a: AntourageWidget.ModernAVPlayerMediaMetadata, b: AntourageWidget.ModernAVPlayerMediaMetadata) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class HttpConnection : AntourageWidget.Connection {
  weak public var delegate: AntourageWidget.ConnectionDelegate?
  public var connectionId: Swift.String? {
    get
  }
  convenience public init(url: Foundation.URL, options: AntourageWidget.HttpConnectionOptions = HttpConnectionOptions(), logger: AntourageWidget.Logger = NullLogger())
  @objc deinit
  public func start()
  public func send(data: Foundation.Data, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  public func stop(stopError: Swift.Error? = nil)
}
@_hasMissingDesignatedInitializers public class ConnectionTransportDelegate : AntourageWidget.TransportDelegate {
  public func transportDidOpen()
  public func transportDidReceiveData(_ data: Foundation.Data)
  public func transportDidClose(_ error: Swift.Error?)
  @objc deinit
}
extension HubConnection {
  public func invoke(method: Swift.String, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  public func invoke<T1>(method: Swift.String, _ arg1: T1, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable
  public func invoke<T1, T2>(method: Swift.String, _ arg1: T1, _ arg2: T2, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable
  public func invoke<T1, T2, T3>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable
  public func invoke<T1, T2, T3, T4>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5, T6>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable
  public func invoke<TRes>(method: Swift.String, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<T1, TRes>(method: Swift.String, _ arg1: T1, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, T6, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7, T8, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, resultType: TRes.Type, invocationDidComplete: @escaping (TRes?, Swift.Error?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable, TRes : Swift.Decodable
  public func send(method: Swift.String, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in})
  public func send<T1>(method: Swift.String, _ arg1: T1, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable
  public func send<T1, T2>(method: Swift.String, _ arg1: T1, _ arg2: T2, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable
  public func send<T1, T2, T3>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable
  public func send<T1, T2, T3, T4>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5, T6>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable
  public func on(method: Swift.String, callback: @escaping () -> Swift.Void)
  public func on<T1>(method: Swift.String, callback: @escaping (T1) -> Swift.Void) where T1 : Swift.Decodable
  public func on<T1, T2>(method: Swift.String, callback: @escaping (T1, T2) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable
  public func on<T1, T2, T3>(method: Swift.String, callback: @escaping (T1, T2, T3) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable
  public func on<T1, T2, T3, T4>(method: Swift.String, callback: @escaping (T1, T2, T3, T4) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5>(method: Swift.String, callback: @escaping (T1, T2, T3, T4, T5) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6>(method: Swift.String, callback: @escaping (T1, T2, T3, T4, T5, T6) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, callback: @escaping (T1, T2, T3, T4, T5, T6, T7) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable, T7 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, callback: @escaping (T1, T2, T3, T4, T5, T6, T7, T8) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable, T7 : Swift.Decodable, T8 : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where TItemType : Swift.Decodable
  public func stream<T1, TItemType>(method: Swift.String, _ arg1: T1, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, T6, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, T6, T7, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, T6, T7, T8, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, streamItemReceived: @escaping (TItemType) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable, TItemType : Swift.Decodable
}
public protocol Content {
  var id: Swift.Int { get }
  var title: Swift.String { get }
  var creatorName: Swift.String { get }
  var creatorNickname: Swift.String { get }
  var images: [Foundation.URL] { get }
  var date: Foundation.Date { get }
  var broadcasterPicUrl: Swift.String? { get }
  var type: AntourageWidget.ContentType { get }
}
public protocol VideoContent : AntourageWidget.Content {
  var url: Swift.String { get }
  var latestMessage: AntourageWidget.LatestComment? { get set }
  var isChatOn: Swift.Bool { get }
  var isPollOn: Swift.Bool { get }
  var shareLink: Swift.String? { get }
  var viewsCount: Swift.Int { get }
}
public struct TransportType : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let longPolling: AntourageWidget.TransportType
  public static let webSockets: AntourageWidget.TransportType
  public static let all: AntourageWidget.TransportType
  public typealias Element = AntourageWidget.TransportType
  public typealias ArrayLiteralElement = AntourageWidget.TransportType
  public typealias RawValue = Swift.Int
}
public protocol HostChangeable : AnyObject {
}
extension HostChangeable where Self : UIKit.UIViewController {
  public func presentChangeHostAlert()
}
@_hasMissingDesignatedInitializers public class WebsocketsTransport : AntourageWidget.Transport {
  weak public var delegate: AntourageWidget.TransportDelegate?
  public func start(url: Foundation.URL, options: AntourageWidget.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: (Swift.Error?) -> Swift.Void)
  public func close()
  @objc deinit
}
public class HubConnection {
  weak public var delegate: AntourageWidget.HubConnectionDelegate?
  public var connectionId: Swift.String? {
    get
  }
  public init(connection: AntourageWidget.Connection, hubProtocol: AntourageWidget.HubProtocol, logger: AntourageWidget.Logger = NullLogger())
  @objc deinit
  public func start()
  public func stop()
  public func on(method: Swift.String, callback: @escaping (AntourageWidget.ArgumentExtractor) throws -> Swift.Void)
  public func send(method: Swift.String, arguments: [Swift.Encodable], sendDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  public func invoke(method: Swift.String, arguments: [Swift.Encodable], invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  public func invoke<T>(method: Swift.String, arguments: [Swift.Encodable], resultType: T.Type, invocationDidComplete: @escaping (T?, Swift.Error?) -> Swift.Void) where T : Swift.Decodable
  public func stream<T>(method: Swift.String, arguments: [Swift.Encodable], streamItemReceived: @escaping (T) -> Swift.Void, invocationDidComplete: @escaping (Swift.Error?) -> Swift.Void) -> AntourageWidget.StreamHandle where T : Swift.Decodable
  public func cancelStreamInvocation(streamHandle: AntourageWidget.StreamHandle, cancelDidFail: @escaping (Swift.Error) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class ArgumentExtractor {
  public func getArgument<T>(type: T.Type) throws -> T where T : Swift.Decodable
  public func hasMoreArgs() -> Swift.Bool
  @objc deinit
}
extension MessageMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AntourageWidget.MessageMO>
  @objc @NSManaged dynamic public var nickname: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content: AntourageWidget.VideoContentMO? {
    @objc get
    @objc set
  }
}
public protocol PlayerMedia : Swift.CustomStringConvertible {
  var url: Foundation.URL { get }
  var type: AntourageWidget.MediaType { get }
  var assetOptions: [Swift.String : Any]? { get }
  func isLive() -> Swift.Bool
  func getMetadata() -> AntourageWidget.PlayerMediaMetadata?
  func setMetadata(_ metadata: AntourageWidget.PlayerMediaMetadata?)
}
extension PlayerMedia {
  public var description: Swift.String {
    get
  }
}
extension PlayerMedia {
  public func isLive() -> Swift.Bool
}
public enum ConnError : Swift.Error {
  case invalidURL
  case noData
  case unauthorized
  case unknown(Swift.String)
}
extension ConnError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
open class KeychainWrapper {
  @available(*, deprecated, message: "KeychainWrapper.defaultKeychainWrapper is deprecated since version 2.2.1, use KeychainWrapper.standard instead")
  public static let defaultKeychainWrapper: AntourageWidget.KeychainWrapper
  public static let standard: AntourageWidget.KeychainWrapper
  public var serviceName: Swift.String {
    get
  }
  public var accessGroup: Swift.String? {
    get
  }
  public init(serviceName: Swift.String, accessGroup: Swift.String? = nil)
  open func hasValue(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  open func accessibilityOfKey(_ key: Swift.String) -> AntourageWidget.KeychainItemAccessibility?
  open func allKeys() -> Swift.Set<Swift.String>
  open func integer(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Int?
  open func float(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Float?
  open func double(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Double?
  open func bool(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool?
  open func string(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.String?
  open func object(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Foundation.NSCoding?
  open func data(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Foundation.Data?
  open func dataRef(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Foundation.Data?
  @discardableResult
  open func set(_ value: Swift.Int, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Float, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Double, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.NSCoding, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @available(*, deprecated, message: "remove is deprecated since version 2.2.1, use removeObject instead")
  @discardableResult
  open func remove(key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func removeObject(forKey key: Swift.String, withAccessibility accessibility: AntourageWidget.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func removeAllKeys() -> Swift.Bool
  open class func wipeKeychain()
  @objc deinit
}
public protocol AVPlayerRemoteCommand {
  var reference: MediaPlayer.MPRemoteCommand { get }
  var isEnabled: (AntourageWidget.MediaType) -> Swift.Bool { get }
}
public enum KeychainItemAccessibility {
  @available(iOS 4, *)
  case afterFirstUnlock
  @available(iOS 4, *)
  case afterFirstUnlockThisDeviceOnly
  @available(iOS 4, *)
  case always
  @available(iOS 8, *)
  case whenPasscodeSetThisDeviceOnly
  @available(iOS 4, *)
  case alwaysThisDeviceOnly
  @available(iOS 4, *)
  case whenUnlocked
  @available(iOS 4, *)
  case whenUnlockedThisDeviceOnly
  public static func == (a: AntourageWidget.KeychainItemAccessibility, b: AntourageWidget.KeychainItemAccessibility) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum LogLevel : Swift.Int {
  case error
  case warning
  case info
  case debug
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Logger {
  func log(logLevel: AntourageWidget.LogLevel, message: @autoclosure () -> Swift.String)
}
extension LogLevel {
  public func toString() -> Swift.String
}
public class PrintLogger : AntourageWidget.Logger {
  public init()
  public func log(logLevel: AntourageWidget.LogLevel, message: @autoclosure () -> Swift.String)
  @objc deinit
}
public class NullLogger : AntourageWidget.Logger {
  public init()
  public func log(logLevel: AntourageWidget.LogLevel, message: @autoclosure () -> Swift.String)
  @objc deinit
}
public enum ProtocolType : Swift.Int {
  case Text
  case Binary
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol HubProtocol {
  var name: Swift.String { get }
  var version: Swift.Int { get }
  var type: AntourageWidget.ProtocolType { get }
  func parseMessages(input: Foundation.Data) throws -> [AntourageWidget.HubMessage]
  func writeMessage(message: AntourageWidget.HubMessage) throws -> Foundation.Data
}
public enum MessageType : Swift.Int, Swift.Codable {
  case Invocation
  case StreamItem
  case Completion
  case StreamInvocation
  case CancelInvocation
  case Ping
  case Close
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
public protocol HubMessage {
  var type: AntourageWidget.MessageType { get }
}
@_hasMissingDesignatedInitializers public class ServerInvocationMessage : AntourageWidget.HubMessage, Swift.Encodable {
  final public let type: AntourageWidget.MessageType
  final public let invocationId: Swift.String?
  final public let target: Swift.String
  final public let arguments: [Swift.Encodable]
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class ClientInvocationMessage : AntourageWidget.HubMessage, Swift.Decodable {
  final public let type: AntourageWidget.MessageType
  final public let target: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  public func getArgument<T>(type: T.Type) throws -> T where T : Swift.Decodable
  @objc deinit
}
public class StreamItemMessage : AntourageWidget.HubMessage, Swift.Decodable {
  final public let type: AntourageWidget.MessageType
  final public let invocationId: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  public func getItem<T>(_ type: T.Type) throws -> T where T : Swift.Decodable
  @objc deinit
}
public class CompletionMessage : AntourageWidget.HubMessage, Swift.Decodable {
  final public let type: AntourageWidget.MessageType
  final public let invocationId: Swift.String
  final public let error: Swift.String?
  final public let hasResult: Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  public func getResult<T>(_ type: T.Type) throws -> T? where T : Swift.Decodable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamInvocationMessage : AntourageWidget.HubMessage, Swift.Encodable {
  final public let type: AntourageWidget.MessageType
  final public let invocationId: Swift.String
  final public let target: Swift.String
  final public let arguments: [Swift.Encodable]
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CancelInvocationMessage : AntourageWidget.HubMessage, Swift.Encodable {
  final public let type: AntourageWidget.MessageType
  final public let invocationId: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class PingMessage : AntourageWidget.HubMessage {
  final public let type: AntourageWidget.MessageType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CloseMessage : AntourageWidget.HubMessage, Swift.Decodable {
  public var type: AntourageWidget.MessageType {
    get
  }
  final public let error: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public struct SponsoredBanner : Swift.Codable {
  public let imageUrl: Swift.String?
  public let externalUrl: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ModernAVPlayerConfiguration : AntourageWidget.PlayerConfiguration {
  public let rateObservingTimeout: Swift.Double
  public let rateObservingTickTime: Swift.Double
  public let preferredTimescale: CoreMedia.CMTimeScale
  public let periodicPlayingTime: CoreMedia.CMTime
  public let audioSessionCategory: AVFoundation.AVAudioSession.Category
  public let reachabilityURLSessionTimeout: Swift.Double
  public let reachabilityNetworkTestingURL: Foundation.URL
  public let reachabilityNetworkTestingTickTime: Swift.Double
  public let reachabilityNetworkTestingIteration: Swift.UInt
  public var useDefaultRemoteCommand: Swift.Bool
  public let allowsExternalPlayback: Swift.Bool
  public let itemLoadedAssetKeys: [Swift.String]
  public init()
}
@_hasMissingDesignatedInitializers public class StorageManager {
  public static var shared: AntourageWidget.StorageManager
  @objc deinit
}
extension StorageManager {
  public func loadVideoContent(content: AntourageWidget.VideoContent) -> AntourageWidget.VideoContentMO
  public func loadStoptime(for videoContent: AntourageWidget.VideoContent) -> Swift.String
  public func saveStoptime(for videoContent: AntourageWidget.VideoContent, value: Swift.String)
  public func saveLatestComment(for videoContent: AntourageWidget.VideoContent, value: AntourageWidget.LatestComment?)
  public func saveChat(for videoContent: AntourageWidget.VideoContent, value: [AntourageWidget.Message])
  public func savePolls(for videoContent: AntourageWidget.VideoContent, value: [AntourageWidget.Poll])
}
extension VideoContentMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AntourageWidget.VideoContentMO>
  @objc @NSManaged dynamic public var date: Foundation.Date {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latestMessage: AntourageWidget.LatestComment? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stopTime: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var chatLoaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latestCommentLoaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messagesMO: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pollsMO: Foundation.NSSet? {
    @objc get
    @objc set
  }
  public var messages: [AntourageWidget.Message]? {
    get
  }
}
extension VideoContentMO {
  @objc(addMessagesMOObject:) @NSManaged dynamic public func addToMessagesMO(_ value: AntourageWidget.MessageMO)
  @objc(removeMessagesMOObject:) @NSManaged dynamic public func removeFromMessagesMO(_ value: AntourageWidget.MessageMO)
  @objc(addMessagesMO:) @NSManaged dynamic public func addToMessagesMO(_ values: Foundation.NSSet)
  @objc(removeMessagesMO:) @NSManaged dynamic public func removeFromMessagesMO(_ values: Foundation.NSSet)
}
extension VideoContentMO {
  @objc(addPollsMOObject:) @NSManaged dynamic public func addToPollsMO(_ value: AntourageWidget.PollMO)
  @objc(removePollsMOObject:) @NSManaged dynamic public func removeFromPollsMO(_ value: AntourageWidget.PollMO)
  @objc(addPollsMO:) @NSManaged dynamic public func addToPollsMO(_ values: Foundation.NSSet)
  @objc(removePollsMO:) @NSManaged dynamic public func removeFromPollsMO(_ values: Foundation.NSSet)
}
public enum ContentType : Swift.String, Swift.Codable {
  case vod
  case live
  case post
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension PollMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AntourageWidget.PollMO>
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pollAnswers: [Foundation.NSNumber]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pollQuestion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userAnswer: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content: AntourageWidget.VideoContentMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(MessageMO) public class MessageMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol Transport : AnyObject {
  var delegate: AntourageWidget.TransportDelegate? { get set }
  func start(url: Foundation.URL, options: AntourageWidget.HttpConnectionOptions)
  func send(data: Foundation.Data, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  func close()
}
public protocol PlayerMediaItem : AntourageWidget.PlayerMedia {
  var item: AVFoundation.AVPlayerItem { get }
}
public protocol HubConnectionDelegate : AnyObject {
  func connectionDidOpen(hubConnection: AntourageWidget.HubConnection)
  func connectionDidFailToOpen(error: Swift.Error)
  func connectionDidClose(error: Swift.Error?)
  func connectionWillReconnect(error: Swift.Error)
  func connectionDidReconnect()
}
extension HubConnectionDelegate {
  public func connectionWillReconnect(error: Swift.Error)
  public func connectionDidReconnect()
}
public struct RetryContext {
  public let failedAttemptsCount: Swift.Int
  public let reconnectStartTime: Foundation.Date
  public let error: Swift.Error
}
public protocol ReconnectPolicy {
  func nextAttemptInterval(retryContext: AntourageWidget.RetryContext) -> Dispatch.DispatchTimeInterval
}
public class DefaultReconnectPolicy : AntourageWidget.ReconnectPolicy {
  public init(retryIntervals: [Dispatch.DispatchTimeInterval] = [.milliseconds(0), .seconds(2), .seconds(10), .seconds(30)])
  public func nextAttemptInterval(retryContext: AntourageWidget.RetryContext) -> Dispatch.DispatchTimeInterval
  @objc deinit
}
public protocol PlayerPlugin {
  func didInit(player: AVFoundation.AVPlayer)
  func willStartLoading(media: AntourageWidget.PlayerMedia)
  func didStartLoading(media: AntourageWidget.PlayerMedia)
  func didStartBuffering(media: AntourageWidget.PlayerMedia)
  func didLoad(media: AntourageWidget.PlayerMedia, duration: Swift.Double?)
  func didMediaChanged(_ media: AntourageWidget.PlayerMedia, previousMedia: AntourageWidget.PlayerMedia?)
  func willStartPlaying(media: AntourageWidget.PlayerMedia, position: Swift.Double)
  func didStartPlaying(media: AntourageWidget.PlayerMedia)
  func didPaused(media: AntourageWidget.PlayerMedia?, position: Swift.Double)
  func didStopped(media: AntourageWidget.PlayerMedia?, position: Swift.Double)
  func didStartWaitingForNetwork(media: AntourageWidget.PlayerMedia)
  func didFailed(media: AntourageWidget.PlayerMedia, error: AntourageWidget.PlayerError)
  func didItemPlayToEndTime(media: AntourageWidget.PlayerMedia, endTime: Swift.Double)
}
extension PlayerPlugin {
  public func didInit(player: AVFoundation.AVPlayer)
  public func willStartLoading(media: AntourageWidget.PlayerMedia)
  public func didStartLoading(media: AntourageWidget.PlayerMedia)
  public func didStartBuffering(media: AntourageWidget.PlayerMedia)
  public func didLoad(media: AntourageWidget.PlayerMedia, duration: Swift.Double?)
  public func didMediaChanged(_ media: AntourageWidget.PlayerMedia, previousMedia: AntourageWidget.PlayerMedia?)
  public func willStartPlaying(media: AntourageWidget.PlayerMedia, position: Swift.Double)
  public func didStartPlaying(media: AntourageWidget.PlayerMedia)
  public func didPaused(media: AntourageWidget.PlayerMedia?, position: Swift.Double)
  public func didStopped(media: AntourageWidget.PlayerMedia?, position: Swift.Double)
  public func didStartWaitingForNetwork(media: AntourageWidget.PlayerMedia)
  public func didFailed(media: AntourageWidget.PlayerMedia, error: AntourageWidget.PlayerError)
  public func didItemPlayToEndTime(media: AntourageWidget.PlayerMedia, endTime: Swift.Double)
}
public protocol FirebaseFetcher {
  func setLatestMessages(VODs: [AntourageWidget.Content], completion: @escaping (() -> ()))
  func setInfo(lives: [AntourageWidget.Live], completion: @escaping (() -> ()))
}
extension KeychainWrapper {
  public func remove(forKey key: AntourageWidget.KeychainWrapper.Key)
}
extension KeychainWrapper {
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> Swift.String? {
    get
    set
  }
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> Swift.Bool? {
    get
    set
  }
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> Swift.Int? {
    get
    set
  }
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> Swift.Double? {
    get
    set
  }
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> Swift.Float? {
    get
    set
  }
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> CoreGraphics.CGFloat? {
    get
    set
  }
  public subscript(key: AntourageWidget.KeychainWrapper.Key) -> Foundation.Data? {
    get
    set
  }
}
extension KeychainWrapper {
  public func data(forKey key: AntourageWidget.KeychainWrapper.Key) -> Foundation.Data?
  public func bool(forKey key: AntourageWidget.KeychainWrapper.Key) -> Swift.Bool?
  public func integer(forKey key: AntourageWidget.KeychainWrapper.Key) -> Swift.Int?
  public func float(forKey key: AntourageWidget.KeychainWrapper.Key) -> Swift.Float?
  public func cgFloat(forKey key: AntourageWidget.KeychainWrapper.Key) -> CoreGraphics.CGFloat?
  public func double(forKey key: AntourageWidget.KeychainWrapper.Key) -> Swift.Double?
  public func string(forKey key: AntourageWidget.KeychainWrapper.Key) -> Swift.String?
}
extension KeychainWrapper {
  public struct Key : Swift.Hashable, Swift.RawRepresentable, Swift.ExpressibleByStringLiteral {
    public var rawValue: Swift.String
    public init(rawValue: Swift.String)
    public init(stringLiteral value: Swift.String)
    public typealias StringLiteralType = Swift.String
    public typealias ExtendedGraphemeClusterLiteralType = Swift.String
    public typealias UnicodeScalarLiteralType = Swift.String
    public typealias RawValue = Swift.String
  }
}
public protocol MediaPlayer : AnyObject, AntourageWidget.PlayerCommand {
  var currentMedia: AntourageWidget.PlayerMedia? { get }
  var currentTime: Swift.Double { get }
  var loopMode: Swift.Bool { get set }
  var player: AVFoundation.AVPlayer { get }
  var remoteCommands: [AntourageWidget.ModernAVPlayerRemoteCommand]? { get }
  func updateMetadata(_ metadata: AntourageWidget.PlayerMediaMetadata?)
}
public protocol Chat {
  var onAdd: ((AntourageWidget.Message) -> ())? { get set }
  var onRemove: ((AntourageWidget.Message) -> ())? { get set }
  var onStateChange: ((Swift.Bool) -> ())? { get set }
  func send(message: AntourageWidget.Message, completionBlock: @escaping (Swift.Error?) -> ())
}
public enum WidgetLocale : Swift.String {
  case english
  case swedish
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class ModernAVPlayerMedia : AntourageWidget.PlayerMedia {
  final public let url: Foundation.URL
  final public let type: AntourageWidget.MediaType
  final public let assetOptions: [Swift.String : Any]?
  public init(url: Foundation.URL, type: AntourageWidget.MediaType, metadata: AntourageWidget.ModernAVPlayerMediaMetadata? = nil, assetOptions: [Swift.String : Any]? = nil)
  public func getMetadata() -> AntourageWidget.PlayerMediaMetadata?
  public func setMetadata(_ metadata: AntourageWidget.PlayerMediaMetadata?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PollMO) public class PollMO : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public struct Message {
  public var key: Swift.String
  public let timestamp: Swift.Int
  public let userID: Swift.String
  public let nickname: Swift.String
  public let text: Swift.String
  public let avatarUrl: Swift.String?
  public init(userID: Swift.String, timestamp: Swift.Int = Int(Date().timeIntervalSince1970), nickname: Swift.String, text: Swift.String, key: Swift.String = "", avatarUrl: Swift.String? = nil)
  public init?(data: [Swift.String : Any], docID: Swift.String, date: Foundation.Date?)
  public func toAnyObject() -> [Swift.String : Any]
}
public enum PlayerError : Swift.Error {
  case loadingFailed
  case playbackStalled
  case bufferingFailed
  public static func == (a: AntourageWidget.PlayerError, b: AntourageWidget.PlayerError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class HttpConnectionOptions {
  public var headers: [Swift.String : Swift.String]
  public var accessTokenProvider: () -> Swift.String?
  public var httpClientFactory: (AntourageWidget.HttpConnectionOptions) -> AntourageWidget.HttpClientProtocol
  public var skipNegotiation: Swift.Bool
  public var requestTimeout: Swift.Double
  public init()
  @objc deinit
}
public class ModernAVPlayerRemoteCommandFactory {
  public var defaultCommands: [AntourageWidget.ModernAVPlayerRemoteCommand] {
    get
  }
  public init(player: AntourageWidget.ModernAVPlayerExposable, commandCenter: MediaPlayer.MPRemoteCommandCenter = MPRemoteCommandCenter.shared())
  public var playCommand: AntourageWidget.ModernAVPlayerRemoteCommand {
    get
    set
  }
  public var togglePlayPauseCommand: AntourageWidget.ModernAVPlayerRemoteCommand {
    get
    set
  }
  public var pauseCommand: AntourageWidget.ModernAVPlayerRemoteCommand {
    get
    set
  }
  public var stopCommand: AntourageWidget.ModernAVPlayerRemoteCommand {
    get
    set
  }
  public var changePositionCommand: AntourageWidget.ModernAVPlayerRemoteCommand {
    get
    set
  }
  public func skipBackwardCommand(preferredIntervals: [Foundation.NSNumber] = [10]) -> AntourageWidget.ModernAVPlayerRemoteCommand
  public func skipForwardCommand(preferredIntervals: [Foundation.NSNumber] = [10]) -> AntourageWidget.ModernAVPlayerRemoteCommand
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongPollingTransport : AntourageWidget.Transport {
  public var delegate: AntourageWidget.TransportDelegate?
  public func start(url: Foundation.URL, options: AntourageWidget.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: @escaping (Swift.Error?) -> Swift.Void)
  public func close()
  @objc deinit
}
public struct UploadImageResponse : Swift.Codable {
  public let success: Swift.Bool
  public let imageUrl: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case delete
  case patch
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public struct RequestData {
}
public protocol PlayerCommand {
  func load(media: AntourageWidget.PlayerMedia, autostart: Swift.Bool, position: Swift.Double?)
  func pause()
  func play()
  func seek(position: Swift.Double)
  func stop()
}
public protocol PlayerConfiguration {
  var rateObservingTimeout: Foundation.TimeInterval { get }
  var rateObservingTickTime: Foundation.TimeInterval { get }
  var preferredTimescale: CoreMedia.CMTimeScale { get }
  var periodicPlayingTime: CoreMedia.CMTime { get }
  var audioSessionCategory: AVFoundation.AVAudioSession.Category { get }
  var reachabilityURLSessionTimeout: Foundation.TimeInterval { get }
  var reachabilityNetworkTestingURL: Foundation.URL { get }
  var reachabilityNetworkTestingTickTime: Foundation.TimeInterval { get }
  var reachabilityNetworkTestingIteration: Swift.UInt { get }
  var useDefaultRemoteCommand: Swift.Bool { get }
  var allowsExternalPlayback: Swift.Bool { get }
  var itemLoadedAssetKeys: [Swift.String] { get }
}
public enum PlayerUnavailableActionReason {
  case alreadyPaused
  case alreadyPlaying
  case alreadyStopped
  case alreadyTryingToPlay
  case seekPositionNotAvailable
  case loadMediaFirst
  case seekOverstepPosition
  case waitEstablishedNetwork
  case waitLoadedMedia
  public static func == (a: AntourageWidget.PlayerUnavailableActionReason, b: AntourageWidget.PlayerUnavailableActionReason) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias ModernAVPlayerExposable = AntourageWidget.MediaPlayer & AntourageWidget.ModernAVPlayerCurrentState
@objc @_inheritsConvenienceInitializers @IBDesignable public class GradientView : UIKit.UIView {
  @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (AntourageWidget.Reachability) -> ()
  public typealias NetworkUnreachable = (AntourageWidget.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: AntourageWidget.Reachability.NetworkStatus, b: AntourageWidget.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: AntourageWidget.Reachability.Connection
    public static func == (a: AntourageWidget.Reachability.Connection, b: AntourageWidget.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: AntourageWidget.Reachability.NetworkReachable?
  public var whenUnreachable: AntourageWidget.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: AntourageWidget.Reachability.Connection {
    get
  }
  public var connection: AntourageWidget.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum SignalRError : Swift.Error {
  case invalidState
  case webError(statusCode: Swift.Int)
  case hubInvocationError(message: Swift.String)
  case hubInvocationCancelled
  case unknownMessageType
  case invalidMessage
  case unsupportedType
  case serializationError(underlyingError: Swift.Error)
  case connectionIsBeingClosed
  case invalidOperation(message: Swift.String)
  case protocolViolation(underlyingError: Swift.Error)
  case handshakeError(message: Swift.String)
  case invalidNegotiationResponse(message: Swift.String)
  case serverClose(message: Swift.String?)
  case noSupportedTransportAvailable
  case connectionIsReconnecting
}
public protocol Poll {
  var key: Swift.String { get set }
  var userAnswer: Swift.Int? { get set }
  var pollQuestion: Swift.String { get set }
  var pollAnswers: [Swift.String] { get set }
  var answersCount: [Swift.Int] { get set }
  var onUpdate: (() -> ())? { get set }
  var percentForEachAnswer: [Swift.Int] { get set }
  func saveAnswer(index: Swift.Int, deviceID: Swift.String)
}
public enum ModernAVPlayerLoggerDomain : Swift.CustomStringConvertible {
  case state
  case service
  case error
  case lifecycleService
  case lifecycleState
  case remoteCommand
  case unavailableCommand
  public var description: Swift.String {
    get
  }
  public static func == (a: AntourageWidget.ModernAVPlayerLoggerDomain, b: AntourageWidget.ModernAVPlayerLoggerDomain) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class IQTextView : UIKit.UITextView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @objc override dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
}
public protocol TransportDelegate : AnyObject {
  func transportDidOpen()
  func transportDidReceiveData(_ data: Foundation.Data)
  func transportDidClose(_ error: Swift.Error?)
}
public protocol ConnectionDelegate : AnyObject {
  func connectionDidOpen(connection: AntourageWidget.Connection)
  func connectionDidFailToOpen(error: Swift.Error)
  func connectionDidReceiveData(connection: AntourageWidget.Connection, data: Foundation.Data)
  func connectionDidClose(error: Swift.Error?)
  func connectionWillReconnect(error: Swift.Error)
  func connectionDidReconnect()
}
extension ConnectionDelegate {
  public func connectionWillReconnect(error: Swift.Error)
  public func connectionDidReconnect()
}
@_hasMissingDesignatedInitializers public class HttpResponse {
  @objc deinit
}
public protocol ModernAVPlayerCurrentState : AnyObject {
  var state: AntourageWidget.ModernAVPlayer.State { get }
}
public struct AntourageAVPlayerConfiguration : AntourageWidget.PlayerConfiguration {
  public let rateObservingTimeout: Swift.Double
  public let rateObservingTickTime: Swift.Double
  public let preferredTimescale: CoreMedia.CMTimeScale
  public let periodicPlayingTime: CoreMedia.CMTime
  public let audioSessionCategory: AVFoundation.AVAudioSession.Category
  public let reachabilityURLSessionTimeout: Swift.Double
  public let reachabilityNetworkTestingURL: Foundation.URL
  public let reachabilityNetworkTestingTickTime: Swift.Double
  public let reachabilityNetworkTestingIteration: Swift.UInt
  public var useDefaultRemoteCommand: Swift.Bool
  public let allowsExternalPlayback: Swift.Bool
  public let itemLoadedAssetKeys: [Swift.String]
  public init()
}
public protocol PlayerMediaMetadata : Swift.CustomStringConvertible {
  var title: Swift.String? { get }
  var artist: Swift.String? { get }
  var albumTitle: Swift.String? { get }
  var image: Foundation.Data? { get }
  var remoteImageUrl: Foundation.URL? { get }
}
extension PlayerMediaMetadata {
  public var description: Swift.String {
    get
  }
}
public struct ModernAVPlayerRemoteCommand : AntourageWidget.AVPlayerRemoteCommand, Swift.CustomDebugStringConvertible {
  public let reference: MediaPlayer.MPRemoteCommand
  public let isEnabled: (AntourageWidget.MediaType) -> Swift.Bool
  public let debugDescription: Swift.String
  public init(reference: MediaPlayer.MPRemoteCommand, debugDescription: Swift.String? = nil, isEnabled: @escaping (AntourageWidget.MediaType) -> Swift.Bool)
}
@_hasMissingDesignatedInitializers final public class VOD : AntourageWidget.VideoContent {
  final public var viewsCount: Swift.Int
  final public var stopTime: Swift.String {
    get
    set
  }
  final public var id: Swift.Int
  final public var title: Swift.String
  final public var url: Swift.String
  final public var creatorName: Swift.String
  final public var creatorNickname: Swift.String
  final public var images: [Foundation.URL]
  final public var type: AntourageWidget.ContentType
  final public var date: Foundation.Date
  final public var duration: Swift.String {
    get
  }
  final public var broadcasterPicUrl: Swift.String?
  final public var watchedTime: Swift.Int?
  final public var latestMessage: AntourageWidget.LatestComment?
  final public var isChatOn: Swift.Bool
  final public var isPollOn: Swift.Bool
  final public var shareLink: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FooterView : UIKit.UICollectionReusableView {
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FirebaseCreator {
  func createPollManager(streamId: Swift.Int, path: Swift.String) -> AntourageWidget.PollManager
  func createChat(videoContent: AntourageWidget.VideoContent, path: Swift.String) -> AntourageWidget.Chat
  func createMessageFetcher(path: Swift.String) -> AntourageWidget.FirebaseFetcher
}
extension UIView {
  public func badge(text badgeText: Swift.String?, badgeEdgeInsets: UIKit.UIEdgeInsets? = nil, appearance: AntourageWidget.BadgeAppearance = BadgeAppearance())
}
extension UIBarButtonItem {
  @objc dynamic public func badge(text: Swift.String?)
  public func badge(text badgeText: Swift.String?, appearance: AntourageWidget.BadgeAppearance = BadgeAppearance())
}
public struct BadgeAppearance {
  public var font: UIKit.UIFont
  public var textAlignment: UIKit.NSTextAlignment
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public var allowShadow: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var textColor: UIKit.UIColor
  public var animate: Swift.Bool
  public var duration: Swift.Double
  public var distanceFromCenterY: CoreGraphics.CGFloat
  public var distanceFromCenterX: CoreGraphics.CGFloat
  public var size: CoreGraphics.CGSize?
  public init()
}
public enum TransferFormat : Swift.String {
  case text
  case binary
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class StreamHandle {
  @objc deinit
}
final public class Live : AntourageWidget.VideoContent, Swift.Codable {
  final public var id: Swift.Int
  final public var title: Swift.String
  final public var latestMessage: AntourageWidget.LatestComment?
  final public var isChatOn: Swift.Bool
  final public var isPollOn: Swift.Bool
  final public var shareLink: Swift.String?
  final public var creatorName: Swift.String
  final public var creatorNickname: Swift.String
  final public var thumbnailUrl: Swift.String?
  final public var images: [Foundation.URL] {
    get
    set
  }
  final public var url: Swift.String
  final public var type: AntourageWidget.ContentType
  final public var date: Foundation.Date
  final public var viewsCount: Swift.Int
  final public var broadcasterPicUrl: Swift.String?
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MediaType {
  case clip
  case stream(isLive: Swift.Bool)
}
extension MediaType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MediaType : Swift.Equatable {
}
public func == (lhs: AntourageWidget.MediaType, rhs: AntourageWidget.MediaType) -> Swift.Bool
public struct WidgetMargins {
  public let vertical: CoreGraphics.CGFloat
  public let horizontal: CoreGraphics.CGFloat
  public init(vertical: CoreGraphics.CGFloat, horizontal: CoreGraphics.CGFloat)
}
public protocol PollManager {
  func observePolls(deviceID: Swift.String, completion: @escaping ((AntourageWidget.Poll?) -> ()))
  func removeFirebaseObserver()
}
extension UIImage : Foundation.NSDiscardableContent {
  @objc dynamic public func beginContentAccess() -> Swift.Bool
  @objc dynamic public func endContentAccess()
  @objc dynamic public func discardContentIfPossible()
  @objc dynamic public func isContentDiscarded() -> Swift.Bool
}
public class JSONHubProtocol : AntourageWidget.HubProtocol {
  final public let name: Swift.String
  final public let version: Swift.Int
  final public let type: AntourageWidget.ProtocolType
  public init(logger: AntourageWidget.Logger, encoder: Foundation.JSONEncoder = JSONEncoder(), decoder: Foundation.JSONDecoder = JSONDecoder())
  public func parseMessages(input: Foundation.Data) throws -> [AntourageWidget.HubMessage]
  public func createHubMessage(payload: Foundation.Data) throws -> AntourageWidget.HubMessage
  public func writeMessage(message: AntourageWidget.HubMessage) throws -> Foundation.Data
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EmptyDataSourceView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public struct WebSocketEvents {
  public var open: () -> ()
  public var close: (Swift.Int, Swift.String, Swift.Bool) -> ()
  public var error: (Swift.Error) -> ()
  public var message: (Any) -> ()
  public var pong: (Any) -> ()
  public var end: (Swift.Int, Swift.String, Swift.Bool, Swift.Error?) -> ()
}
public enum WebSocketBinaryType : Swift.CustomStringConvertible {
  case uInt8Array
  case nsData
  case uInt8UnsafeBufferPointer
  public var description: Swift.String {
    get
  }
  public static func == (a: AntourageWidget.WebSocketBinaryType, b: AntourageWidget.WebSocketBinaryType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum WebSocketReadyState : Swift.Int, Swift.CustomStringConvertible {
  case connecting = 0
  case open = 1
  case closing = 2
  case closed = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct WebSocketCompression {
  public var on: Swift.Bool
  public var noContextTakeover: Swift.Bool
  public var maxWindowBits: Swift.Int
}
public struct WebSocketService : Swift.OptionSet {
  public typealias RawValue = Swift.UInt
  public init(rawValue value: Swift.UInt)
  public init(nilLiteral: ())
  public static var allZeros: AntourageWidget.WebSocketService {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
  public static var None: AntourageWidget.WebSocketService {
    get
  }
  public static var VoIP: AntourageWidget.WebSocketService {
    get
  }
  public static var Video: AntourageWidget.WebSocketService {
    get
  }
  public static var Background: AntourageWidget.WebSocketService {
    get
  }
  public static var Voice: AntourageWidget.WebSocketService {
    get
  }
  public typealias Element = AntourageWidget.WebSocketService
  public typealias ArrayLiteralElement = AntourageWidget.WebSocketService
}
public enum WebSocketError : Swift.Error, Swift.CustomStringConvertible {
  case memory
  case needMoreInput
  case invalidHeader
  case invalidAddress
  case network(Swift.String)
  case libraryError(Swift.String)
  case payloadError(Swift.String)
  case protocolError(Swift.String)
  case invalidResponse(Swift.String)
  case invalidCompressionOptions(Swift.String)
  public var description: Swift.String {
    get
  }
  public var details: Swift.String {
    get
  }
}
@objc public protocol WebSocketDelegate {
  @objc func webSocketOpen()
  @objc func webSocketClose(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool)
  @objc func webSocketError(_ error: Foundation.NSError)
  @objc optional func webSocketMessageText(_ text: Swift.String)
  @objc optional func webSocketMessageData(_ data: Foundation.Data)
  @objc optional func webSocketPong()
  @objc optional func webSocketEnd(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool, error: Foundation.NSError?)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class WebSocket : ObjectiveC.NSObject {
  @objc override dynamic open var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic open func isEqual(_ other: Any?) -> Swift.Bool
  @objc convenience public init(_ url: Swift.String)
  @objc convenience public init(url: Foundation.URL)
  @objc convenience public init(_ url: Swift.String, subProtocols: [Swift.String])
  @objc convenience public init(_ url: Swift.String, subProtocol: Swift.String)
  @objc public init(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc convenience override dynamic public init()
  @objc open var url: Swift.String {
    @objc get
  }
  @objc open var subProtocol: Swift.String {
    @objc get
  }
  open var compression: AntourageWidget.WebSocketCompression {
    get
    set
  }
  @objc open var allowSelfSignedSSL: Swift.Bool {
    @objc get
    @objc set
  }
  open var services: AntourageWidget.WebSocketService {
    get
    set
  }
  open var event: AntourageWidget.WebSocketEvents {
    get
    set
  }
  @objc open var eventQueue: Dispatch.DispatchQueue? {
    @objc get
    @objc set
  }
  open var binaryType: AntourageWidget.WebSocketBinaryType {
    get
    set
  }
  @objc open var readyState: AntourageWidget.WebSocketReadyState {
    @objc get
  }
  @objc open func open(_ url: Swift.String)
  @objc open func open(nsurl url: Foundation.URL)
  @objc open func open(_ url: Swift.String, subProtocols: [Swift.String])
  @objc open func open(_ url: Swift.String, subProtocol: Swift.String)
  @objc open func open(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc open func open()
  @objc open func close(_ code: Swift.Int = 1000, reason: Swift.String = "Normal Closure")
  @objc open func send(_ message: Any)
  @objc open func ping(_ message: Any)
  @objc open func ping()
  @objc deinit
}
public func == (lhs: AntourageWidget.WebSocket, rhs: AntourageWidget.WebSocket) -> Swift.Bool
extension WebSocket {
  @objc dynamic public var delegate: AntourageWidget.WebSocketDelegate? {
    @objc get
    @objc set
  }
  @objc dynamic public func send(text: Swift.String)
  @objc dynamic public func send(data: Foundation.Data)
}
@_inheritsConvenienceInitializers @objc(VideoContentMO) public class VideoContentMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AntWidget {
  public static let shared: AntourageWidget.AntWidget
  final public var firebaseCreator: AntourageWidget.FirebaseCreator?
  final public var widgetView: AntourageWidget.WidgetView {
    get
    set
  }
  final public var widgetLocale: AntourageWidget.WidgetLocale?
  final public var widgetPosition: AntourageWidget.WidgetPosition {
    get
    set
  }
  final public var widgetMargins: AntourageWidget.WidgetMargins {
    get
    set
  }
  final public var onViewerAppear: ((Foundation.NSDictionary) -> Swift.Void)?
  final public var onViewerDisappear: ((Foundation.NSDictionary) -> Swift.Void)?
  @objc deinit
  public static func configure(path: Swift.String)
  public static func registerNotifications(fcmToken: Swift.String, completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  public static func objc_registerNotifications(FCMToken: Swift.String, completionHandler: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  final public func showFeed()
}
extension AntWidget : AntourageWidget.ModernAVPlayerDelegate {
  final public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didStateChange state: AntourageWidget.ModernAVPlayer.State)
  final public func modernAVPlayer(_ player: AntourageWidget.ModernAVPlayer, didItemDurationChange itemDuration: Swift.Double?)
}
public protocol HttpClientProtocol {
  func get(url: Foundation.URL, completionHandler: @escaping (AntourageWidget.HttpResponse?, Swift.Error?) -> Swift.Void)
  func post(url: Foundation.URL, body: Foundation.Data?, completionHandler: @escaping (AntourageWidget.HttpResponse?, Swift.Error?) -> Swift.Void)
  func delete(url: Foundation.URL, completionHandler: @escaping (AntourageWidget.HttpResponse?, Swift.Error?) -> Swift.Void)
}
extension AntourageWidget.ModernAVPlayer.State : Swift.Equatable {}
extension AntourageWidget.ModernAVPlayer.State : Swift.Hashable {}
extension AntourageWidget.ModernAVPlayer.State : Swift.RawRepresentable {}
extension AntourageWidget.WidgetPosition : Swift.Equatable {}
extension AntourageWidget.WidgetPosition : Swift.Hashable {}
extension AntourageWidget.WidgetPosition : Swift.RawRepresentable {}
extension AntourageWidget.KeychainItemAccessibility : Swift.Equatable {}
extension AntourageWidget.KeychainItemAccessibility : Swift.Hashable {}
extension AntourageWidget.LogLevel : Swift.Equatable {}
extension AntourageWidget.LogLevel : Swift.Hashable {}
extension AntourageWidget.LogLevel : Swift.RawRepresentable {}
extension AntourageWidget.ProtocolType : Swift.Equatable {}
extension AntourageWidget.ProtocolType : Swift.Hashable {}
extension AntourageWidget.ProtocolType : Swift.RawRepresentable {}
extension AntourageWidget.MessageType : Swift.Equatable {}
extension AntourageWidget.MessageType : Swift.Hashable {}
extension AntourageWidget.MessageType : Swift.RawRepresentable {}
extension AntourageWidget.ContentType : Swift.Equatable {}
extension AntourageWidget.ContentType : Swift.Hashable {}
extension AntourageWidget.ContentType : Swift.RawRepresentable {}
extension AntourageWidget.WidgetLocale : Swift.Equatable {}
extension AntourageWidget.WidgetLocale : Swift.Hashable {}
extension AntourageWidget.WidgetLocale : Swift.RawRepresentable {}
extension AntourageWidget.PlayerError : Swift.Equatable {}
extension AntourageWidget.PlayerError : Swift.Hashable {}
extension AntourageWidget.HTTPMethod : Swift.Equatable {}
extension AntourageWidget.HTTPMethod : Swift.Hashable {}
extension AntourageWidget.HTTPMethod : Swift.RawRepresentable {}
extension AntourageWidget.PlayerUnavailableActionReason : Swift.Equatable {}
extension AntourageWidget.PlayerUnavailableActionReason : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension AntourageWidget.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension AntourageWidget.Reachability.NetworkStatus : Swift.Hashable {}
extension AntourageWidget.Reachability.Connection : Swift.Equatable {}
extension AntourageWidget.Reachability.Connection : Swift.Hashable {}
extension AntourageWidget.ModernAVPlayerLoggerDomain : Swift.Equatable {}
extension AntourageWidget.ModernAVPlayerLoggerDomain : Swift.Hashable {}
extension AntourageWidget.TransferFormat : Swift.Equatable {}
extension AntourageWidget.TransferFormat : Swift.Hashable {}
extension AntourageWidget.TransferFormat : Swift.RawRepresentable {}
extension AntourageWidget.WebSocketBinaryType : Swift.Equatable {}
extension AntourageWidget.WebSocketBinaryType : Swift.Hashable {}
extension AntourageWidget.WebSocketReadyState : Swift.Equatable {}
extension AntourageWidget.WebSocketReadyState : Swift.Hashable {}
extension AntourageWidget.WebSocketReadyState : Swift.RawRepresentable {}
